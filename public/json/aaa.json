{
  "name": "root",
  "child": [
    {
      "name": "predict()",
      "arg": null,
      "child": [
        {
          "name": "_standardize_input_data()",
          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,",
          "child": []
        },
        {
          "name": "<listcomp>()",
          "arg": null,
          "child": []
        },
        {
          "name": "<listcomp>()",
          "arg": null,
          "child": []
        },
        {
          "name": "learning_phase()",
          "arg": null,
          "child": [
            {
              "name": "get_default_graph()",
              "arg": null,
              "child": [
                {
                  "name": "get_default()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_GetGlobalDefaultGraph()",
                      "arg": null,
                      "child": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_make_predict_function()",
          "arg": null,
          "child": [
            {
              "name": "<listcomp>()",
              "arg": null,
              "child": []
            },
            {
              "name": "learning_phase()",
              "arg": null,
              "child": [
                {
                  "name": "get_default_graph()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_GetGlobalDefaultGraph()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "learning_phase()",
              "arg": null,
              "child": [
                {
                  "name": "get_default_graph()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_GetGlobalDefaultGraph()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "has_arg()",
              "arg": null,
              "child": [
                {
                  "name": "signature()",
                  "arg": null,
                  "child": [
                    {
                      "name": "from_callable()",
                      "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,",
                      "child": [
                        {
                          "name": "_signature_from_callable()",
                          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,",
                          "child": [
                            {
                              "name": "unwrap()",
                              "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,",
                              "child": [
                                {
                                  "name": "_is_wrapper()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            },
                            {
                              "name": "isfunction()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "_signature_from_function()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "isfunction()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "<genexpr>()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "has_arg()",
              "arg": null,
              "child": [
                {
                  "name": "signature()",
                  "arg": null,
                  "child": [
                    {
                      "name": "from_callable()",
                      "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,",
                      "child": [
                        {
                          "name": "_signature_from_callable()",
                          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,",
                          "child": [
                            {
                              "name": "unwrap()",
                              "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,",
                              "child": [
                                {
                                  "name": "_is_wrapper()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            },
                            {
                              "name": "isfunction()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "_signature_from_function()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "isfunction()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "<genexpr>()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "control_dependencies()",
              "arg": null,
              "child": [
                {
                  "name": "executing_eagerly()",
                  "arg": null,
                  "child": [
                    {
                      "name": "context_safe()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "executing_eagerly()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "get_default_graph()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_GetGlobalDefaultGraph()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "control_dependencies()",
                  "arg": null,
                  "child": [
                    {
                      "name": "_current_control_dependencies()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "as_graph_element()",
                      "arg": null,
                      "child": [
                        {
                          "name": "_as_graph_element_locked()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_as_graph_element()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "_push_control_dependencies_controller()",
              "arg": null,
              "child": []
            },
            {
              "name": "executing_eagerly()",
              "arg": null,
              "child": [
                {
                  "name": "context_safe()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "executing_eagerly()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "context()",
              "arg": null,
              "child": []
            },
            {
              "name": "executing_eagerly()",
              "arg": null,
              "child": []
            },
            {
              "name": "_get_graph_from_inputs()",
              "arg": null,
              "child": [
                {
                  "name": "get_default_graph()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_GetGlobalDefaultGraph()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "get_default_graph()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_GetGlobalDefaultGraph()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "as_default()",
              "arg": null,
              "child": [
                {
                  "name": "get_controller()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "__enter__()",
              "arg": null,
              "child": [
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "push()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "get_controller()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "graph_mode()",
                  "arg": null,
                  "child": [
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_mode()",
                      "arg": null,
                      "child": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "name_scope()",
              "arg": null,
              "child": []
            },
            {
              "name": "__enter__()",
              "arg": null,
              "child": [
                {
                  "name": "as_text()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "unique_name()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "no_op()",
              "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,",
              "child": [
                {
                  "name": "_apply_op_helper()",
                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,",
                  "child": [
                    {
                      "name": "_Flatten()",
                      "arg": null,
                      "child": [
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "_get_graph_from_inputs()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default_graph()",
                          "arg": null,
                          "child": [
                            {
                              "name": "get_default()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "get_default_graph()",
                          "arg": null,
                          "child": [
                            {
                              "name": "get_default()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "as_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_controller()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "push()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "get_controller()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "graph_mode()",
                      "arg": null,
                      "child": [
                        {
                          "name": "context()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_mode()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "executing_eagerly()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_get_graph_from_inputs()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default_graph()",
                          "arg": null,
                          "child": [
                            {
                              "name": "get_default()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "get_default_graph()",
                          "arg": null,
                          "child": [
                            {
                              "name": "get_default()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "as_default()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_controller()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "__enter__()",
                      "arg": null,
                      "child": [
                        {
                          "name": "context()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "push()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "get_controller()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "graph_mode()",
                          "arg": null,
                          "child": [
                            {
                              "name": "context()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "_mode()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "name_scope()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "__enter__()",
                      "arg": null,
                      "child": [
                        {
                          "name": "as_text()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "name_from_scope_name()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "<listcomp>()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_MaybeColocateWith()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "create_op()",
                      "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,",
                      "child": [
                        {
                          "name": "_tmp_in_graph_mode()",
                          "arg": null,
                          "child": [
                            {
                              "name": "context_safe()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "executing_eagerly()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "context_safe()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "context()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "executing_eagerly()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "getfullargspec()",
                          "arg": null,
                          "child": [
                            {
                              "name": "unwrap()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_has_tf_decorator_attr()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            },
                            {
                              "name": "getfullargspec()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_signature_from_callable()",
                                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,",
                                  "child": [
                                    {
                                      "name": "isfunction()",
                                      "arg": null,
                                      "child": []
                                    },
                                    {
                                      "name": "_signature_from_function()",
                                      "arg": null,
                                      "child": [
                                        {
                                          "name": "isfunction()",
                                          "arg": null,
                                          "child": []
                                        },
                                        {
                                          "name": "<genexpr>()",
                                          "arg": null,
                                          "child": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "ismethod()",
                          "arg": null,
                          "child": [
                            {
                              "name": "unwrap()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_has_tf_decorator_attr()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            },
                            {
                              "name": "ismethod()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_check_not_finalized()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "name_from_scope_name()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_NodeDef()",
                          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,",
                          "child": [
                            {
                              "name": "as_bytes()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "as_bytes()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "iteritems()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_control_dependencies_for_inputs()",
                          "arg": null,
                          "child": [
                            {
                              "name": "<listcomp>()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "_mutation_lock()",
                          "arg": null,
                          "child": [
                            {
                              "name": "group()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_validate_group_id()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "acquire()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_validate_group_id()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "_another_group_active()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "<genexpr>()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "<genexpr>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_next_id()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_check_not_finalized()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "extract_stack()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_get_control_flow_context()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_reconstruct_sequence_inputs()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_create_c_op()",
                          "arg": null,
                          "child": [
                            {
                              "name": "as_text()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "as_text()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "items()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "_add_op()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_check_not_finalized()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "_control_flow_post_processing()",
                          "arg": null,
                          "child": [
                            {
                              "name": "<listcomp>()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "_create_op_helper()",
                          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,",
                          "child": [
                            {
                              "name": "_record_op_seen_by_control_dependencies()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "add_op()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            },
                            {
                              "name": "_apply_device_functions()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "peek_objs()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "<genexpr>()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                },
                                {
                                  "name": "_snapshot_device_function_stack_metadata()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "peek_traceable_objs()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "name": "_snapshot_colocation_stack_metadata()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "peek_traceable_objs()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "<dictcomp>()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "release()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_validate_group_id()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "notify_all()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "notify()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_is_owned()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "__exit__()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "__exit__()",
                      "arg": null,
                      "child": [
                        {
                          "name": "context()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "pop()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "pop()",
                      "arg": null,
                      "child": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "__exit__()",
              "arg": null,
              "child": []
            },
            {
              "name": "__exit__()",
              "arg": null,
              "child": [
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "pop()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "_pop_control_dependencies_controller()",
              "arg": null,
              "child": []
            }
          ]
        },
        {
          "name": "_predict_loop()",
          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,",
          "child": [
            {
              "name": "_check_num_samples()",
              "arg": null,
              "child": []
            },
            {
              "name": "_make_batches()",
              "arg": null,
              "child": [
                {
                  "name": "<listcomp>()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "_slice_arrays()",
              "arg": null,
              "child": [
                {
                  "name": "<listcomp>()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "is_sparse()",
              "arg": null,
              "child": []
            },
            {
              "name": "is_sparse()",
              "arg": null,
              "child": []
            },
            {
              "name": "get_session()",
              "arg": null,
              "child": [
                {
                  "name": "get_default_session()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_default()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "as_default()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_controller()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "push()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "get_controller()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "graph_mode()",
                  "arg": null,
                  "child": [
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_mode()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "global_variables()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_collection()",
                      "arg": null,
                      "child": [
                        {
                          "name": "get_default_graph()",
                          "arg": null,
                          "child": [
                            {
                              "name": "get_default()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "get_collection()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "pop()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "_run()",
              "arg": null,
              "child": [
                {
                  "name": "flatten_dict_items()",
                  "arg": null,
                  "child": [
                    {
                      "name": "iteritems()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "IsSequence()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "IsSequence()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "_feed_fn()",
                  "arg": null,
                  "child": [
                    {
                      "name": "<lambda>()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "as_graph_element()",
                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,",
                  "child": [
                    {
                      "name": "_as_graph_element_locked()",
                      "arg": null,
                      "child": [
                        {
                          "name": "_as_graph_element()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "asarray()",
                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,",
                  "child": []
                },
                {
                  "name": "get_shape()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "is_compatible_with()",
                  "arg": null,
                  "child": [
                    {
                      "name": "as_shape()",
                      "arg": null,
                      "child": [
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": [
                            {
                              "name": "as_dimension()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "as_dimension()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "as_dimension()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "as_dimension()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "is_compatible_with()",
                      "arg": null,
                      "child": [
                        {
                          "name": "as_dimension()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "is_compatible_with()",
                      "arg": null,
                      "child": [
                        {
                          "name": "as_dimension()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "is_compatible_with()",
                      "arg": null,
                      "child": [
                        {
                          "name": "as_dimension()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    },
                    {
                      "name": "is_compatible_with()",
                      "arg": null,
                      "child": [
                        {
                          "name": "as_dimension()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "is_feedable()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "as_bytes()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "_feed_fn()",
                  "arg": null,
                  "child": [
                    {
                      "name": "<lambda>()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "as_graph_element()",
                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,",
                  "child": [
                    {
                      "name": "_as_graph_element_locked()",
                      "arg": null,
                      "child": [
                        {
                          "name": "_as_graph_element()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "asarray()",
                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197675 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197676 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197677 asarray()   2020-11-03 10:41:56   keyword argument count = 1,",
                  "child": []
                },
                {
                  "name": "get_shape()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "is_compatible_with()",
                  "arg": null,
                  "child": [
                    {
                      "name": "as_shape()",
                      "arg": null,
                      "child": [
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "is_feedable()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "as_bytes()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "as_default()",
                  "arg": null,
                  "child": [
                    {
                      "name": "get_controller()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "push()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "get_controller()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "graph_mode()",
                  "arg": null,
                  "child": [
                    {
                      "name": "context()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_mode()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "for_fetch()",
                  "arg": null,
                  "child": [
                    {
                      "name": "<listcomp>()",
                      "arg": null,
                      "child": [
                        {
                          "name": "for_fetch()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_is_attrs_instance()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "<lambda>()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "get_default_graph()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "get_default()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "name": "as_graph_element()",
                              "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197675 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197676 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197677 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^632 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197678 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197679 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197680 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197681 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1260 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197682 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197683 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197684 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197685 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197686 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n      #Start#4#1197687 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197688 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197689 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197690 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197691 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197692 for_fetch()   2020-11-03 10:41:56  @1arg:(list)\n        #Start#5#1197693 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197694 for_fetch()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197695 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197696 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1108 0.015625 0.000000 0.015625 0 1 0 4131 0 0.000000 0.000000 0 \n            #Start#7#1197697 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197698 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197699 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197700 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,",
                              "child": [
                                {
                                  "name": "_as_graph_element_locked()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_as_graph_element()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "for_fetch()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_is_attrs_instance()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "<lambda>()",
                              "arg": null,
                              "child": []
                            },
                            {
                              "name": "get_default_graph()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "get_default()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "get_default()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "name": "as_graph_element()",
                              "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197675 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197676 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197677 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^632 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197678 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197679 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197680 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197681 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1260 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197682 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197683 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197684 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197685 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197686 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n      #Start#4#1197687 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197688 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197689 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197690 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197691 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197692 for_fetch()   2020-11-03 10:41:56  @1arg:(list)\n        #Start#5#1197693 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197694 for_fetch()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197695 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197696 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1108 0.015625 0.000000 0.015625 0 1 0 4131 0 0.000000 0.000000 0 \n            #Start#7#1197697 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197698 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197699 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197700 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197701 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197702 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.015625 0.000000 0.015625 0 1 0 4131 0 0.015625 0.000000 0 \n          #Start#6#1197703 for_fetch()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197704 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197705 <lambda>()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197706 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197707 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197708 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197709 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,",
                              "child": [
                                {
                                  "name": "_as_graph_element_locked()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_as_graph_element()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "_uniquify_fetches()",
                      "arg": null,
                      "child": [
                        {
                          "name": "unique_fetches()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "unique_fetches()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "context()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "pop()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "unique_fetches()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "_assert_fetchable()",
                  "arg": null,
                  "child": [
                    {
                      "name": "is_fetchable()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "_assert_fetchable()",
                  "arg": null,
                  "child": [
                    {
                      "name": "is_fetchable()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "<listcomp>()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "_update_with_movers()",
                  "arg": null,
                  "child": [
                    {
                      "name": "_get_handle_feeder()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_get_handle_feeder()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "fetches()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "targets()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "_do_run()",
                  "arg": null,
                  "child": [
                    {
                      "name": "<genexpr>()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_as_tf_output()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_as_tf_output()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "<listcomp>()",
                      "arg": null,
                      "child": [
                        {
                          "name": "_as_tf_output()",
                          "arg": null,
                          "child": [
                            {
                              "name": "tf_output()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_swig_getattr()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_swig_getattr_nondynamic()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                },
                                {
                                  "name": "_swig_setattr()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_swig_setattr_nondynamic()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                },
                                {
                                  "name": "_swig_setattr()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_swig_setattr_nondynamic()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                },
                                {
                                  "name": "_swig_setattr()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_swig_setattr_nondynamic()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "<listcomp>()",
                      "arg": null,
                      "child": []
                    },
                    {
                      "name": "_do_call()",
                      "arg": null,
                      "child": [
                        {
                          "name": "_extend_graph()",
                          "arg": null,
                          "child": [
                            {
                              "name": "_session_run_lock()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "group()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "_validate_group_id()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "name": "acquire()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_validate_group_id()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "_another_group_active()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "<genexpr>()",
                                      "arg": null,
                                      "child": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "name": "release()",
                              "arg": null,
                              "child": [
                                {
                                  "name": "_validate_group_id()",
                                  "arg": null,
                                  "child": []
                                },
                                {
                                  "name": "notify_all()",
                                  "arg": null,
                                  "child": [
                                    {
                                      "name": "notify()",
                                      "arg": null,
                                      "child": [
                                        {
                                          "name": "_is_owned()",
                                          "arg": null,
                                          "child": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "name": "_call_tf_sessionrun()",
                          "arg": null,
                          "child": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "build_results()",
                  "arg": null,
                  "child": [
                    {
                      "name": "build_results()",
                      "arg": null,
                      "child": [
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "build_results()",
                          "arg": null,
                          "child": [
                            {
                              "name": "<lambda>()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        },
                        {
                          "name": "<listcomp>()",
                          "arg": null,
                          "child": []
                        },
                        {
                          "name": "build_results()",
                          "arg": null,
                          "child": [
                            {
                              "name": "<lambda>()",
                              "arg": null,
                              "child": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "decode_predictions()",
      "arg": null,
      "child": [
        {
          "name": "get_file()",
          "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197675 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197676 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197677 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^632 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197678 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197679 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197680 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197681 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1260 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197682 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197683 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197684 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197685 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197686 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n      #Start#4#1197687 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197688 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197689 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197690 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197691 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197692 for_fetch()   2020-11-03 10:41:56  @1arg:(list)\n        #Start#5#1197693 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197694 for_fetch()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197695 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197696 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1108 0.015625 0.000000 0.015625 0 1 0 4131 0 0.000000 0.000000 0 \n            #Start#7#1197697 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197698 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197699 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197700 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197701 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197702 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.015625 0.000000 0.015625 0 1 0 4131 0 0.015625 0.000000 0 \n          #Start#6#1197703 for_fetch()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197704 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197705 <lambda>()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197706 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197707 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197708 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197709 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197710 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197711 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Operation)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 1 0 4126 0 0.000000 0.015625 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.000000 0.031250 0.031250 0 1 0 4126 0 0.000000 0.015625 0 \n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.015625 0.031250 0.046875 0 2 0 8257 0 0.015625 0.031250 0 \n        #Start#5#1197712 _uniquify_fetches()   2020-11-03 10:41:56  @1arg:(list)\n          #Start#6#1197713 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ElementFetchMapper)\n          *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197714 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ElementFetchMapper)\n          *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _uniquify_fetches() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End for_fetch() return:(_ListFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1268 0.015625 0.031250 0.046875 0 2 0 8257 0 0.015625 0.031250 0 \n      #Start#4#1197715 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197716 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197717 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ListFetchMapper)\n      *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197718 _assert_fetchable()   2020-11-03 10:41:56  @1arg:(_FetchHandler)@2arg:(Graph)@3arg:(Operation)\n        #Start#5#1197719 is_fetchable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n        *End is_fetchable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _assert_fetchable() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.015625 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197720 _assert_fetchable()   2020-11-03 10:41:56  @1arg:(_FetchHandler)@2arg:(Graph)@3arg:(Operation)\n        #Start#5#1197721 is_fetchable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n        *End is_fetchable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _assert_fetchable() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197722 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197723 _update_with_movers()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(dict)@3arg:(dict)\n        #Start#5#1197724 _get_handle_feeder()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n        *End _get_handle_feeder() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197725 _get_handle_feeder()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n        *End _get_handle_feeder() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _update_with_movers() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      #Start#4#1197726 fetches()   2020-11-03 10:41:56  @1arg:(_FetchHandler)\n      *End fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197727 targets()   2020-11-03 10:41:56  @1arg:(_FetchHandler)\n      *End targets() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197728 _do_run()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197729 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197730 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197731 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197732 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197733 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197734 tf_output()   2020-11-03 10:41:56  @1arg:(SwigPyObject)@2arg:(int)0\n              #Start#8#1197735 _swig_getattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)this\n                #Start#9#1197736 _swig_getattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_getattr_nondynamic() return:(NULL) CostTime:123.000000  2020-11-03 10:41:56 ^^228 1172 -131.109375 -2282.234375 -3462995.078125 -8472 -83581 -232922608 -343926216 0 -131.109375 -2282.250000 -223117 \n              *End _swig_getattr() return:(NULL) CostTime:123.000000  2020-11-03 10:41:56 ^^320 1364 -131.109375 -2282.234375 -3462995.078125 -8472 -83581 -232922608 -343926216 0 -131.109375 -2282.234375 -223117 \n              #Start#8#1197737 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)this@4arg:(SwigPyObject)\n                #Start#9#1197738 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1232 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197739 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)oper@4arg:(SwigPyObject)\n                #Start#9#1197740 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197741 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)index@4arg:(int)0\n                #Start#9#1197742 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1364 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1364 0.000000 0.015625 0.015625 0 1 0 4127 0 0.000000 0.031250 0 \n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1364 0.000000 0.031250 0.031250 0 1 0 4127 0 0.000000 0.031250 0 \n        #Start#5#1197743 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197744 _do_call()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197745 _extend_graph()   2020-11-03 10:41:56  @1arg:(Session)\n            #Start#7#1197746 _session_run_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197747 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n                #Start#9#1197748 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n                *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _session_run_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197749 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              #Start#8#1197750 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197751 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197752 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.000000 0.031250 0 0 0 0 1 0.000000 0.000000 0 \n            *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.000000 0.031250 0 0 0 0 1 0.000000 0.000000 0 \n            #Start#7#1197753 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              #Start#8#1197754 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197755 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n                #Start#9#1197756 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                  #Start#10#1197757 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                  *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _extend_graph() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1352 0.093750 0.000000 0.125000 0 0 0 0 1 0.093750 0.000000 1316 \n          #Start#6#1197758 _call_tf_sessionrun()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(dict)@4arg:(list)@5arg:(list)@6arg:(NoneType)\n          *End _call_tf_sessionrun() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1172 1.125000 0.203125 0.781250 0 1 0 4128 947 1.125000 0.187500 47561 \n        *End _do_call() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1352 1.218750 0.203125 0.906250 0 1 0 4128 949 1.218750 0.203125 48877 \n      *End _do_run() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1364 1.218750 0.234375 0.937500 0 2 0 8255 949 1.218750 0.234375 48877 \n      #Start#4#1197759 build_results()   2020-11-03 10:41:57  @1arg:(_FetchHandler)@2arg:(Session)@3arg:(list)\n        #Start#5#1197760 build_results()   2020-11-03 10:41:57   keyword argument count = 0\n          #Start#6#1197761 <listcomp>()   2020-11-03 10:41:57   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197762 build_results()   2020-11-03 10:41:57  @1arg:(_ElementFetchMapper)@2arg:(list)\n            #Start#7#1197763 <lambda>()   2020-11-03 10:41:57   keyword argument count = 0\n            *End <lambda>() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End build_results() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197764 <listcomp>()   2020-11-03 10:41:57   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197765 build_results()   2020-11-03 10:41:57  @1arg:(_ElementFetchMapper)@2arg:(list)\n            #Start#7#1197766 <lambda>()   2020-11-03 10:41:57   keyword argument count = 0\n            *End <lambda>() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End build_results() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End build_results() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End build_results() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _run() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^120 1760 1.250000 0.390625 1.125000 0 8 0 33026 951 1.250000 0.390625 48877 \n  *End _predict_loop() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^332 4220 1.250000 0.453125 1.187500 0 9 0 37156 956 1.250000 0.437500 48880 \n*End predict() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^360 4220 1.281250 0.843750 1.593750 0 22 0 90825 1019 1.281250 0.828125 48898 \n#Start#1#1197767 decode_predictions()   2020-11-03 10:41:57   keyword argument count = 0\n  #Start#2#1197768 get_file()   2020-11-03 10:41:57   keyword argument count = 2,",
          "child": [
            {
              "name": "join()",
              "arg": null,
              "child": [
                {
                  "name": "splitdrive()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "splitdrive()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "expanduser()",
              "arg": null,
              "child": [
                {
                  "name": "_get_bothseps()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "encodekey()",
                  "arg": null,
                  "child": [
                    {
                      "name": "check_str()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "encodekey()",
                  "arg": null,
                  "child": [
                    {
                      "name": "check_str()",
                      "arg": null,
                      "child": []
                    }
                  ]
                },
                {
                  "name": "encodekey()",
                  "arg": null,
                  "child": [
                    {
                      "name": "check_str()",
                      "arg": null,
                      "child": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "expanduser()",
              "arg": null,
              "child": []
            },
            {
              "name": "join()",
              "arg": null,
              "child": [
                {
                  "name": "splitdrive()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "splitdrive()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "exists()",
              "arg": null,
              "child": []
            },
            {
              "name": "join()",
              "arg": null,
              "child": [
                {
                  "name": "splitdrive()",
                  "arg": null,
                  "child": []
                },
                {
                  "name": "splitdrive()",
                  "arg": null,
                  "child": []
                }
              ]
            },
            {
              "name": "exists()",
              "arg": null,
              "child": []
            },
            {
              "name": "validate_file()",
              "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197675 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197676 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197677 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^632 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197678 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197679 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197680 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197681 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1260 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197682 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197683 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197684 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197685 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197686 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n      #Start#4#1197687 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197688 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197689 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197690 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197691 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197692 for_fetch()   2020-11-03 10:41:56  @1arg:(list)\n        #Start#5#1197693 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197694 for_fetch()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197695 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197696 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1108 0.015625 0.000000 0.015625 0 1 0 4131 0 0.000000 0.000000 0 \n            #Start#7#1197697 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197698 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197699 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197700 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197701 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197702 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.015625 0.000000 0.015625 0 1 0 4131 0 0.015625 0.000000 0 \n          #Start#6#1197703 for_fetch()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197704 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197705 <lambda>()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197706 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197707 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197708 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197709 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197710 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197711 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Operation)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 1 0 4126 0 0.000000 0.015625 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.000000 0.031250 0.031250 0 1 0 4126 0 0.000000 0.015625 0 \n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.015625 0.031250 0.046875 0 2 0 8257 0 0.015625 0.031250 0 \n        #Start#5#1197712 _uniquify_fetches()   2020-11-03 10:41:56  @1arg:(list)\n          #Start#6#1197713 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ElementFetchMapper)\n          *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197714 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ElementFetchMapper)\n          *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _uniquify_fetches() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End for_fetch() return:(_ListFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1268 0.015625 0.031250 0.046875 0 2 0 8257 0 0.015625 0.031250 0 \n      #Start#4#1197715 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197716 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197717 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ListFetchMapper)\n      *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197718 _assert_fetchable()   2020-11-03 10:41:56  @1arg:(_FetchHandler)@2arg:(Graph)@3arg:(Operation)\n        #Start#5#1197719 is_fetchable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n        *End is_fetchable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _assert_fetchable() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.015625 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197720 _assert_fetchable()   2020-11-03 10:41:56  @1arg:(_FetchHandler)@2arg:(Graph)@3arg:(Operation)\n        #Start#5#1197721 is_fetchable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n        *End is_fetchable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _assert_fetchable() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197722 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197723 _update_with_movers()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(dict)@3arg:(dict)\n        #Start#5#1197724 _get_handle_feeder()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n        *End _get_handle_feeder() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197725 _get_handle_feeder()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n        *End _get_handle_feeder() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _update_with_movers() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      #Start#4#1197726 fetches()   2020-11-03 10:41:56  @1arg:(_FetchHandler)\n      *End fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197727 targets()   2020-11-03 10:41:56  @1arg:(_FetchHandler)\n      *End targets() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197728 _do_run()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197729 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197730 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197731 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197732 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197733 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197734 tf_output()   2020-11-03 10:41:56  @1arg:(SwigPyObject)@2arg:(int)0\n              #Start#8#1197735 _swig_getattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)this\n                #Start#9#1197736 _swig_getattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_getattr_nondynamic() return:(NULL) CostTime:123.000000  2020-11-03 10:41:56 ^^228 1172 -131.109375 -2282.234375 -3462995.078125 -8472 -83581 -232922608 -343926216 0 -131.109375 -2282.250000 -223117 \n              *End _swig_getattr() return:(NULL) CostTime:123.000000  2020-11-03 10:41:56 ^^320 1364 -131.109375 -2282.234375 -3462995.078125 -8472 -83581 -232922608 -343926216 0 -131.109375 -2282.234375 -223117 \n              #Start#8#1197737 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)this@4arg:(SwigPyObject)\n                #Start#9#1197738 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1232 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197739 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)oper@4arg:(SwigPyObject)\n                #Start#9#1197740 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197741 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)index@4arg:(int)0\n                #Start#9#1197742 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1364 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1364 0.000000 0.015625 0.015625 0 1 0 4127 0 0.000000 0.031250 0 \n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1364 0.000000 0.031250 0.031250 0 1 0 4127 0 0.000000 0.031250 0 \n        #Start#5#1197743 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197744 _do_call()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197745 _extend_graph()   2020-11-03 10:41:56  @1arg:(Session)\n            #Start#7#1197746 _session_run_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197747 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n                #Start#9#1197748 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n                *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _session_run_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197749 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              #Start#8#1197750 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197751 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197752 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.000000 0.031250 0 0 0 0 1 0.000000 0.000000 0 \n            *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.000000 0.031250 0 0 0 0 1 0.000000 0.000000 0 \n            #Start#7#1197753 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              #Start#8#1197754 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197755 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n                #Start#9#1197756 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                  #Start#10#1197757 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                  *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _extend_graph() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1352 0.093750 0.000000 0.125000 0 0 0 0 1 0.093750 0.000000 1316 \n          #Start#6#1197758 _call_tf_sessionrun()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(dict)@4arg:(list)@5arg:(list)@6arg:(NoneType)\n          *End _call_tf_sessionrun() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1172 1.125000 0.203125 0.781250 0 1 0 4128 947 1.125000 0.187500 47561 \n        *End _do_call() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1352 1.218750 0.203125 0.906250 0 1 0 4128 949 1.218750 0.203125 48877 \n      *End _do_run() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1364 1.218750 0.234375 0.937500 0 2 0 8255 949 1.218750 0.234375 48877 \n      #Start#4#1197759 build_results()   2020-11-03 10:41:57  @1arg:(_FetchHandler)@2arg:(Session)@3arg:(list)\n        #Start#5#1197760 build_results()   2020-11-03 10:41:57   keyword argument count = 0\n          #Start#6#1197761 <listcomp>()   2020-11-03 10:41:57   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197762 build_results()   2020-11-03 10:41:57  @1arg:(_ElementFetchMapper)@2arg:(list)\n            #Start#7#1197763 <lambda>()   2020-11-03 10:41:57   keyword argument count = 0\n            *End <lambda>() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End build_results() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197764 <listcomp>()   2020-11-03 10:41:57   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197765 build_results()   2020-11-03 10:41:57  @1arg:(_ElementFetchMapper)@2arg:(list)\n            #Start#7#1197766 <lambda>()   2020-11-03 10:41:57   keyword argument count = 0\n            *End <lambda>() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End build_results() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End build_results() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End build_results() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _run() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^120 1760 1.250000 0.390625 1.125000 0 8 0 33026 951 1.250000 0.390625 48877 \n  *End _predict_loop() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^332 4220 1.250000 0.453125 1.187500 0 9 0 37156 956 1.250000 0.437500 48880 \n*End predict() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^360 4220 1.281250 0.843750 1.593750 0 22 0 90825 1019 1.281250 0.828125 48898 \n#Start#1#1197767 decode_predictions()   2020-11-03 10:41:57   keyword argument count = 0\n  #Start#2#1197768 get_file()   2020-11-03 10:41:57   keyword argument count = 2,1-th kw:key(str)='cache_subdir',value(str)='models',2-th kw:key(str)='file_hash',value(str)='c2c37ea517e94d9795004a39431a14cb'\n    #Start#3#1197769 join()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197770 splitdrive()   2020-11-03 10:41:57  @1arg:(str)~\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197771 splitdrive()   2020-11-03 10:41:57  @1arg:(str).keras\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End join() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^121 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197772 expanduser()   2020-11-03 10:41:57  @1arg:(str)~\\.keras\n      #Start#4#1197773 _get_bothseps()   2020-11-03 10:41:57  @1arg:(str)~\\.keras\n      *End _get_bothseps() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197774 encodekey()   2020-11-03 10:41:57   keyword argument count = 0\n        #Start#5#1197775 check_str()   2020-11-03 10:41:57   keyword argument count = 0\n        *End check_str() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End encodekey() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^145 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197776 encodekey()   2020-11-03 10:41:57   keyword argument count = 0\n        #Start#5#1197777 check_str()   2020-11-03 10:41:57   keyword argument count = 0\n        *End check_str() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End encodekey() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^152 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      #Start#4#1197778 encodekey()   2020-11-03 10:41:57   keyword argument count = 0\n        #Start#5#1197779 check_str()   2020-11-03 10:41:57   keyword argument count = 0\n        *End check_str() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End encodekey() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^152 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End expanduser() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^168 1260 0.000000 0.015625 0.015625 0 1 0 4128 0 0.000000 0.015625 0 \n    #Start#3#1197780 expanduser()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\n    *End expanduser() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197781 join()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197782 splitdrive()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^189 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197783 splitdrive()   2020-11-03 10:41:57  @1arg:(str)models\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End join() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^147 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197784 exists()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\\models\n    *End exists() return:(bool) CostTime:123.000000  2020-11-03 10:41:57 ^^70 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197785 join()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197786 splitdrive()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\\models\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^196 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197787 splitdrive()   2020-11-03 10:41:57  @1arg:(str)imagenet_class_index.json\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End join() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^173 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197788 exists()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\\models\\imagenet_class_index.json\n    *End exists() return:(bool) CostTime:123.000000  2020-11-03 10:41:57 ^^122 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197789 validate_file()   2020-11-03 10:41:57   keyword argument count = 1,",
              "child": [
                {
                  "name": "_hash_file()",
                  "arg": null,
                  "child": []
                }
              ]
            }
          ]
        },
        {
          "name": "load()",
          "arg": null,
          "child": [
            {
              "name": "decode()",
              "arg": null,
              "child": [
                {
                  "name": "raw_decode()",
                  "arg": "#Start#1#1197408 predict()   2020-11-03 10:41:55   keyword argument count = 0\n  #Start#2#1197409 _standardize_input_data()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='check_batch_axis',value(bool)='False'\n  *End _standardize_input_data() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^1416 1696 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197410 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^2072 2322 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197411 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n  *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^480 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  #Start#2#1197412 learning_phase()   2020-11-03 10:41:55  \n    #Start#3#1197413 get_default_graph()   2020-11-03 10:41:55  \n      #Start#4#1197414 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197415 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197416 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n        *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n  #Start#2#1197417 _make_predict_function()   2020-11-03 10:41:55  @1arg:(Model)\n    #Start#3#1197418 <listcomp>()   2020-11-03 10:41:55   keyword argument count = 0\n    *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n    #Start#3#1197419 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197420 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197421 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197422 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197423 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197424 learning_phase()   2020-11-03 10:41:55  \n      #Start#4#1197425 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197426 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197427 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.000000 0 \n          #Start#6#1197428 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 4 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 15 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 17 0.000000 0.000000 0 \n    *End learning_phase() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 20 0.000000 0.015625 1 \n    #Start#3#1197429 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197430 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197431 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197432 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197433 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197434 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 16 \n            #Start#7#1197435 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197436 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197437 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197438 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1196 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^848 1956 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^876 1984 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^904 2012 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 16 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^932 2040 0.000000 0.015625 0.015625 0 1 0 4130 2 0.000000 0.031250 16 \n    #Start#3#1197439 has_arg()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197440 signature()   2020-11-03 10:41:55   keyword argument count = 0\n        #Start#5#1197441 from_callable()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='follow_wrapped',value(bool)='True'\n          #Start#6#1197442 _signature_from_callable()   2020-11-03 10:41:55   keyword argument count = 2,1-th kw:key(str)='sigcls',value(type),2-th kw:key(str)='follow_wrapper_chains',value(bool)='True'\n            #Start#7#1197443 unwrap()   2020-11-03 10:41:55   keyword argument count = 1,1-th kw:key(str)='stop',value(function)\n              #Start#8#1197444 _is_wrapper()   2020-11-03 10:41:55   keyword argument count = 0\n              *End _is_wrapper() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(function) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197445 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n            *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197446 _signature_from_function()   2020-11-03 10:41:55  @1arg:(type)@2arg:(function)\n              #Start#8#1197447 isfunction()   2020-11-03 10:41:55  @1arg:(function)\n              *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197448 <genexpr>()   2020-11-03 10:41:55   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:55 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n            *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1136 1360 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n          *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1164 2272 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n        *End from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1192 2300 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      *End signature() return:(Signature) CostTime:123.000000  2020-11-03 10:41:55 ^^1220 2328 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    *End has_arg() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^1248 2356 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197449 control_dependencies()   2020-11-03 10:41:55  @1arg:(list)\n      #Start#4#1197450 executing_eagerly()   2020-11-03 10:41:55  \n        #Start#5#1197451 context_safe()   2020-11-03 10:41:55  \n        *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197452 context()   2020-11-03 10:41:55  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197453 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197454 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197455 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197456 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197457 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197458 control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(list)\n        #Start#5#1197459 _current_control_dependencies()   2020-11-03 10:41:55  @1arg:(Graph)\n        *End _current_control_dependencies() return:(set) CostTime:123.000000  2020-11-03 10:41:55 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197460 as_graph_element()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197461 _as_graph_element_locked()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n            #Start#7#1197462 _as_graph_element()   2020-11-03 10:41:55  @1arg:(Tensor)\n            *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:55 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^588 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End control_dependencies() return:(_ControlDependenciesController) CostTime:123.000000  2020-11-03 10:41:55 ^^616 1724 0.000000 0.031250 0.031250 0 1 0 4127 2 0.000000 0.031250 0 \n    #Start#3#1197463 _push_control_dependencies_controller()   2020-11-03 10:41:55  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _push_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197464 executing_eagerly()   2020-11-03 10:41:55  \n      #Start#4#1197465 context_safe()   2020-11-03 10:41:55  \n      *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197466 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n      #Start#4#1197467 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n      *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4129 0 0.000000 0.000000 0 \n    #Start#3#1197468 context()   2020-11-03 10:41:55  \n    *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197469 executing_eagerly()   2020-11-03 10:41:55  @1arg:(Context)\n    *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n    #Start#3#1197470 _get_graph_from_inputs()   2020-11-03 10:41:55   keyword argument count = 0\n      #Start#4#1197471 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197472 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197473 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197474 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197475 get_default_graph()   2020-11-03 10:41:55  \n        #Start#5#1197476 get_default()   2020-11-03 10:41:55   keyword argument count = 0\n          #Start#6#1197477 get_default()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197478 _GetGlobalDefaultGraph()   2020-11-03 10:41:55  @1arg:(_DefaultGraphStack)\n          *End _GetGlobalDefaultGraph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n        *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:55 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197479 as_default()   2020-11-03 10:41:55  @1arg:(Graph)\n      #Start#4#1197480 get_controller()   2020-11-03 10:41:55   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:55 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197481 __enter__()   2020-11-03 10:41:55  @1arg:(_GeneratorContextManager)\n      #Start#4#1197482 context()   2020-11-03 10:41:55  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:55 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197483 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197484 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^688 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197485 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197486 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197487 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1860 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^780 1888 0.000000 0.015625 0.015625 0 1 0 4130 0 0.000000 0.015625 0 \n    #Start#3#1197488 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n    *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^752 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197489 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n      #Start#4#1197490 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197491 unique_name()   2020-11-03 10:41:56   keyword argument count = 0\n      *End unique_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197492 no_op()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n      #Start#4#1197493 _apply_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='name',value(str)='group_deps/'\n        #Start#5#1197494 _Flatten()   2020-11-03 10:41:56  @1arg:(dict_values)\n          #Start#6#1197495 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197496 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _Flatten() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197497 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197498 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197499 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197500 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197501 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197502 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197503 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 1 0.000000 0.015625 0 \n        #Start#5#1197504 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197505 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197506 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197507 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n        *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197508 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197509 graph_mode()   2020-11-03 10:41:56  \n          #Start#6#1197510 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197511 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n          *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197512 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197513 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n        *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197514 _get_graph_from_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197515 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197516 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197517 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197518 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197519 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197520 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 3 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 5 0.000000 0.000000 0 \n        *End _get_graph_from_inputs() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 1 0 4130 6 0.000000 0.015625 0 \n        #Start#5#1197521 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n          #Start#6#1197522 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1368 1568 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1396 2504 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197523 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197524 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197525 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n          *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197526 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197527 graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197528 context()   2020-11-03 10:41:56  \n            *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197529 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n            *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1288 1488 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1316 2424 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __enter__() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^1344 2452 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        #Start#5#1197530 name_scope()   2020-11-03 10:41:56   keyword argument count = 0\n        *End name_scope() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^1280 1480 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197531 __enter__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)\n          #Start#6#1197532 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n          *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197533 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^123 1172 0.015625 0.000000 0.000000 0 0 0 0 0 0.015625 0.000000 0 \n        *End __enter__() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^183 1231 0.015625 0.000000 0.015625 0 0 0 0 0 0.015625 0.000000 0 \n        #Start#5#1197534 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197535 _MaybeColocateWith()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _MaybeColocateWith() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^560 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197536 create_op()   2020-11-03 10:41:56   keyword argument count = 5,1-th kw:key(str)='dtypes' not found in kwdict ,2-th kw:key(str)='name' not found in kwdict ,3-th kw:key(str)='input_types' not found in kwdict ,4-th kw:key(str)='attrs' not found in kwdict ,5-th kw:key(str)='op_def' not found in kwdict \n          #Start#6#1197537 _tmp_in_graph_mode()   2020-11-03 10:41:56  \n            #Start#7#1197538 context_safe()   2020-11-03 10:41:56  \n            *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197539 executing_eagerly()   2020-11-03 10:41:56  \n              #Start#8#1197540 context_safe()   2020-11-03 10:41:56  \n              *End context_safe() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197541 context()   2020-11-03 10:41:56  \n              *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n              #Start#8#1197542 executing_eagerly()   2020-11-03 10:41:56  @1arg:(Context)\n              *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End executing_eagerly() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _tmp_in_graph_mode() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197543 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197544 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197545 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197546 getfullargspec()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197547 _signature_from_callable()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='follow_wrapper_chains',value(bool)='False',2-th kw:key(str)='skip_bound_arg',value(bool)='False',3-th kw:key(str)='sigcls',value(type)\n                #Start#9#1197548 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                #Start#9#1197549 _signature_from_function()   2020-11-03 10:41:56  @1arg:(type)@2arg:(function)\n                  #Start#10#1197550 isfunction()   2020-11-03 10:41:56  @1arg:(function)\n                  *End isfunction() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n                  #Start#10#1197551 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                  *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^88 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End _signature_from_function() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1328 1528 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.015625 0 \n              *End _signature_from_callable() return:(Signature) CostTime:123.000000  2020-11-03 10:41:56 ^^1356 2464 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n            *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2184 2492 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          *End getfullargspec() return:(FullArgSpec) CostTime:123.000000  2020-11-03 10:41:56 ^^2212 3320 0.000000 0.015625 0.015625 0 1 0 4127 1 0.000000 0.015625 0 \n          #Start#6#1197552 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            #Start#7#1197553 unwrap()   2020-11-03 10:41:56  @1arg:(function)\n              #Start#8#1197554 _has_tf_decorator_attr()   2020-11-03 10:41:56  @1arg:(function)\n              *End _has_tf_decorator_attr() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End unwrap() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197555 ismethod()   2020-11-03 10:41:56  @1arg:(function)\n            *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End ismethod() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197556 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197557 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197558 name_from_scope_name()   2020-11-03 10:41:56  @1arg:(str)group_deps/\n          *End name_from_scope_name() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^59 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197559 _NodeDef()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='device',value(NoneType),2-th kw:key(str)='attrs',value(dict)\n            #Start#7#1197560 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^101 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197561 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^107 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197562 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n            *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _NodeDef() return:(NodeDef) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197563 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n          #Start#6#1197564 _control_dependencies_for_inputs()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197565 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_dependencies_for_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197566 _mutation_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197567 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              #Start#8#1197568 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _mutation_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197569 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197570 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197571 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197572 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n            *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197573 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197574 _next_id()   2020-11-03 10:41:56  @1arg:(Graph)\n            #Start#7#1197575 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _next_id() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^56 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197576 extract_stack()   2020-11-03 10:41:56   keyword argument count = 0\n          *End extract_stack() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^1284 1484 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197577 _get_control_flow_context()   2020-11-03 10:41:56  @1arg:(Graph)\n          *End _get_control_flow_context() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197578 _reconstruct_sequence_inputs()   2020-11-03 10:41:56  @1arg:(Operation)@2arg:(OpDef)@3arg:(list)@4arg:(google.protobuf.pyext._message.MessageMapContainer)\n          *End _reconstruct_sequence_inputs() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197579 _create_c_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(NodeDef)@3arg:(list)@4arg:(list)\n            #Start#7#1197580 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197581 as_text()   2020-11-03 10:41:56   keyword argument count = 0\n            *End as_text() return:(str) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197582 items()   2020-11-03 10:41:56  @1arg:(google.protobuf.pyext._message.MessageMapContainer)\n            *End items() return:(ItemsView) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n          *End _create_c_op() return:(SwigPyObject) CostTime:123.000000  2020-11-03 10:41:56 ^^112 1220 0.000000 0.015625 0.015625 0 1 0 4128 3 0.000000 0.015625 0 \n          #Start#6#1197583 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197584 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197585 _add_op()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n            #Start#7#1197586 _check_not_finalized()   2020-11-03 10:41:56  @1arg:(Graph)\n            *End _check_not_finalized() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^215 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197587 _control_flow_post_processing()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197588 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _control_flow_post_processing() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^308 1264 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197589 _create_op_helper()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='compute_device',value(bool)='True'\n            #Start#7#1197590 _record_op_seen_by_control_dependencies()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197591 add_op()   2020-11-03 10:41:56  @1arg:(_ControlDependenciesController)@2arg:(Operation)\n              *End add_op() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _record_op_seen_by_control_dependencies() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197592 _apply_device_functions()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n              #Start#8#1197593 peek_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                #Start#9#1197594 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End peek_objs() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1288 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197595 _snapshot_device_function_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n                #Start#9#1197596 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n                *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.000000 0 \n              *End _snapshot_device_function_stack_metadata() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1256 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            *End _apply_device_functions() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.015625 0.015625 0 0 0 0 3 0.000000 0.015625 0 \n            #Start#7#1197597 _snapshot_colocation_stack_metadata()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197598 peek_traceable_objs()   2020-11-03 10:41:56  @1arg:(TraceableStack)\n              *End peek_traceable_objs() return:(list_reverseiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197599 <dictcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n              *End <dictcomp>() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _snapshot_colocation_stack_metadata() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^288 1396 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n          *End _create_op_helper() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^316 1424 0.000000 0.015625 0.015625 0 1 0 4127 3 0.000000 0.015625 0 \n          #Start#6#1197600 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            #Start#7#1197601 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)0\n            *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197602 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n              #Start#8#1197603 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197604 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n            *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n        *End create_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^148 3320 0.000000 0.140625 0.140625 0 4 0 16509 13 0.000000 0.140625 0 \n        #Start#5#1197605 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197606 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n          #Start#6#1197607 context()   2020-11-03 10:41:56  \n          *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197608 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n          *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197609 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197610 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n        *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^32 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _apply_op_helper() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^32 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    *End no_op() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^60 3320 0.031250 0.218750 0.250000 0 7 0 28897 20 0.031250 0.218750 0 \n    #Start#3#1197611 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 1 0 4127 0 0.000000 0.000000 0 \n    #Start#3#1197612 __exit__()   2020-11-03 10:41:56  @1arg:(_GeneratorContextManager)@2arg:(NoneType)@3arg:(NoneType)@4arg:(NoneType)\n      #Start#4#1197613 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197614 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End __exit__() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197615 _pop_control_dependencies_controller()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(_ControlDependenciesController)\n    *End _pop_control_dependencies_controller() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n  *End _make_predict_function() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^768 3320 0.031250 0.359375 0.390625 0 12 0 49540 52 0.031250 0.359375 18 \n  #Start#2#1197616 _predict_loop()   2020-11-03 10:41:56   keyword argument count = 3,1-th kw:key(str)='batch_size',value(int)='32',2-th kw:key(str)='verbose',value(int)='0',3-th kw:key(str)='steps',value(NoneType)\n    #Start#3#1197617 _check_num_samples()   2020-11-03 10:41:56   keyword argument count = 0\n    *End _check_num_samples() return:(int) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197618 _make_batches()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197619 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End _make_batches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^188 1296 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197620 _slice_arrays()   2020-11-03 10:41:56   keyword argument count = 0\n      #Start#4#1197621 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^320 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    *End _slice_arrays() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^348 2672 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 3 \n    #Start#3#1197622 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^192 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197623 is_sparse()   2020-11-03 10:41:56  @1arg:(Tensor)\n    *End is_sparse() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197624 get_session()   2020-11-03 10:41:56  \n      #Start#4#1197625 get_default_session()   2020-11-03 10:41:56  \n        #Start#5#1197626 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultStack)\n        *End get_default() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End get_default_session() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197627 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197628 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.000000 0 \n      #Start#4#1197629 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197630 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197631 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197632 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197633 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197634 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.015625 0.015625 0 0 0 0 1 0.000000 0.000000 0 \n      #Start#4#1197635 global_variables()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197636 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197637 get_default_graph()   2020-11-03 10:41:56  \n            #Start#7#1197638 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n              #Start#8#1197639 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197640 get_collection()   2020-11-03 10:41:56   keyword argument count = 0\n          *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3056 3256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End get_collection() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3084 4192 0.000000 0.000000 0.000000 0 0 0 0 2 0.000000 0.015625 0 \n      *End global_variables() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^3112 4220 0.000000 0.015625 0.015625 0 0 0 0 2 0.000000 0.015625 0 \n      #Start#4#1197641 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197642 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End get_session() return:(Session) CostTime:123.000000  2020-11-03 10:41:56 ^^0 4220 0.000000 0.046875 0.046875 0 1 0 4130 3 0.000000 0.031250 0 \n    #Start#3#1197643 _run()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(list)@4arg:(dict)@5arg:(NoneType)@6arg:(NoneType)\n      #Start#4#1197644 flatten_dict_items()   2020-11-03 10:41:56  @1arg:(dict)\n        #Start#5#1197645 iteritems()   2020-11-03 10:41:56   keyword argument count = 0\n        *End iteritems() return:(dict_itemiterator) CostTime:123.000000  2020-11-03 10:41:56 ^^80 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197646 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197647 IsSequence()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End IsSequence() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End flatten_dict_items() return:(dict) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4130 0 0.000000 0.015625 0 \n      #Start#4#1197648 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197649 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(numpy.ndarray)\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197650 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197651 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197652 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197653 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^552 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197654 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197655 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197656 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197657 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n            #Start#7#1197658 as_dimension()   2020-11-03 10:41:56  @1arg:(int)1\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197659 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197660 as_dimension()   2020-11-03 10:41:56  @1arg:(int)224\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197661 as_dimension()   2020-11-03 10:41:56  @1arg:(int)3\n            *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^212 1288 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197662 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197663 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.015625 0 \n        #Start#5#1197664 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197665 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197666 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197667 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197668 is_compatible_with()   2020-11-03 10:41:56  @1arg:(Dimension)@2arg:(Dimension)\n          #Start#6#1197669 as_dimension()   2020-11-03 10:41:56  @1arg:(Dimension)\n          *End as_dimension() return:(Dimension) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1288 0.000000 0.031250 0.031250 0 1 0 4128 0 0.000000 0.031250 0 \n      #Start#4#1197670 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197671 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^106 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197672 _feed_fn()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197673 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)@2arg:(float)0.0\n        *End <lambda>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^8 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _feed_fn() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^36 1144 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197674 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='False'\n        #Start#5#1197675 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)False\n          #Start#6#1197676 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n          *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197677 asarray()   2020-11-03 10:41:56   keyword argument count = 1,1-th kw:key(str)='dtype',value(type)\n      *End asarray() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:56 ^^632 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197678 get_shape()   2020-11-03 10:41:56  @1arg:(Tensor)\n      *End get_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197679 is_compatible_with()   2020-11-03 10:41:56  @1arg:(TensorShape)@2arg:(tuple)\n        #Start#5#1197680 as_shape()   2020-11-03 10:41:56  @1arg:(tuple)\n          #Start#6#1197681 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End as_shape() return:(TensorShape) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End is_compatible_with() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1260 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197682 is_feedable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n      *End is_feedable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197683 as_bytes()   2020-11-03 10:41:56   keyword argument count = 0\n      *End as_bytes() return:(bytes) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197684 as_default()   2020-11-03 10:41:56  @1arg:(Graph)\n        #Start#5#1197685 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n        *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End as_default() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^652 1760 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197686 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 1 0.000000 0.015625 0 \n      #Start#4#1197687 push()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)@2arg:(bool)False@3arg:(method)@4arg:(TraceableStack)\n      *End push() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^176 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197688 get_controller()   2020-11-03 10:41:56   keyword argument count = 0\n      *End get_controller() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197689 graph_mode()   2020-11-03 10:41:56  \n        #Start#5#1197690 context()   2020-11-03 10:41:56  \n        *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197691 _mode()   2020-11-03 10:41:56   keyword argument count = 0\n        *End _mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End graph_mode() return:(_GeneratorContextManager) CostTime:123.000000  2020-11-03 10:41:56 ^^624 1732 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197692 for_fetch()   2020-11-03 10:41:56  @1arg:(list)\n        #Start#5#1197693 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197694 for_fetch()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197695 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197696 <lambda>()   2020-11-03 10:41:56  @1arg:(Tensor)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^144 1108 0.015625 0.000000 0.015625 0 1 0 4131 0 0.000000 0.000000 0 \n            #Start#7#1197697 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197698 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197699 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197700 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197701 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197702 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Tensor)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Tensor) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.015625 0.000000 0.015625 0 1 0 4131 0 0.015625 0.000000 0 \n          #Start#6#1197703 for_fetch()   2020-11-03 10:41:56  @1arg:(Operation)\n            #Start#7#1197704 _is_attrs_instance()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End _is_attrs_instance() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197705 <lambda>()   2020-11-03 10:41:56  @1arg:(Operation)\n            *End <lambda>() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197706 get_default_graph()   2020-11-03 10:41:56  \n              #Start#8#1197707 get_default()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197708 get_default()   2020-11-03 10:41:56  @1arg:(_DefaultGraphStack)\n                *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End get_default() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End get_default_graph() return:(Graph) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197709 as_graph_element()   2020-11-03 10:41:56   keyword argument count = 2,1-th kw:key(str)='allow_tensor',value(bool)='True',2-th kw:key(str)='allow_operation',value(bool)='True'\n              #Start#8#1197710 _as_graph_element_locked()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)@3arg:(bool)True@4arg:(bool)True\n                #Start#9#1197711 _as_graph_element()   2020-11-03 10:41:56  @1arg:(Operation)\n                *End _as_graph_element() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _as_graph_element_locked() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End as_graph_element() return:(Operation) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 1 0 4126 0 0.000000 0.015625 0 \n          *End for_fetch() return:(_ElementFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1228 0.000000 0.031250 0.031250 0 1 0 4126 0 0.000000 0.015625 0 \n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^152 1260 0.015625 0.031250 0.046875 0 2 0 8257 0 0.015625 0.031250 0 \n        #Start#5#1197712 _uniquify_fetches()   2020-11-03 10:41:56  @1arg:(list)\n          #Start#6#1197713 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ElementFetchMapper)\n          *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197714 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ElementFetchMapper)\n          *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End _uniquify_fetches() return:(tuple) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End for_fetch() return:(_ListFetchMapper) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1268 0.015625 0.031250 0.046875 0 2 0 8257 0 0.015625 0.031250 0 \n      #Start#4#1197715 context()   2020-11-03 10:41:56  \n      *End context() return:(Context) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197716 pop()   2020-11-03 10:41:56  @1arg:(_ContextSwitchStack)\n      *End pop() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197717 unique_fetches()   2020-11-03 10:41:56  @1arg:(_ListFetchMapper)\n      *End unique_fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197718 _assert_fetchable()   2020-11-03 10:41:56  @1arg:(_FetchHandler)@2arg:(Graph)@3arg:(Operation)\n        #Start#5#1197719 is_fetchable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n        *End is_fetchable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _assert_fetchable() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^28 1136 0.015625 0.000000 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197720 _assert_fetchable()   2020-11-03 10:41:56  @1arg:(_FetchHandler)@2arg:(Graph)@3arg:(Operation)\n        #Start#5#1197721 is_fetchable()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Operation)\n        *End is_fetchable() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _assert_fetchable() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197722 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n      *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197723 _update_with_movers()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(dict)@3arg:(dict)\n        #Start#5#1197724 _get_handle_feeder()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n        *End _get_handle_feeder() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197725 _get_handle_feeder()   2020-11-03 10:41:56  @1arg:(Graph)@2arg:(Tensor)\n        *End _get_handle_feeder() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End _update_with_movers() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^128 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n      #Start#4#1197726 fetches()   2020-11-03 10:41:56  @1arg:(_FetchHandler)\n      *End fetches() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197727 targets()   2020-11-03 10:41:56  @1arg:(_FetchHandler)\n      *End targets() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197728 _do_run()   2020-11-03 10:41:56   keyword argument count = 0\n        #Start#5#1197729 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197730 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197731 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n        *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197732 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197733 _as_tf_output()   2020-11-03 10:41:56  @1arg:(Tensor)\n            #Start#7#1197734 tf_output()   2020-11-03 10:41:56  @1arg:(SwigPyObject)@2arg:(int)0\n              #Start#8#1197735 _swig_getattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)this\n                #Start#9#1197736 _swig_getattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_getattr_nondynamic() return:(NULL) CostTime:123.000000  2020-11-03 10:41:56 ^^228 1172 -131.109375 -2282.234375 -3462995.078125 -8472 -83581 -232922608 -343926216 0 -131.109375 -2282.250000 -223117 \n              *End _swig_getattr() return:(NULL) CostTime:123.000000  2020-11-03 10:41:56 ^^320 1364 -131.109375 -2282.234375 -3462995.078125 -8472 -83581 -232922608 -343926216 0 -131.109375 -2282.234375 -223117 \n              #Start#8#1197737 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)this@4arg:(SwigPyObject)\n                #Start#9#1197738 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^124 1232 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197739 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)oper@4arg:(SwigPyObject)\n                #Start#9#1197740 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197741 _swig_setattr()   2020-11-03 10:41:56  @1arg:(TF_Output)@2arg:(type)@3arg:(str)index@4arg:(int)0\n                #Start#9#1197742 _swig_setattr_nondynamic()   2020-11-03 10:41:56   keyword argument count = 0\n                *End _swig_setattr_nondynamic() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _swig_setattr() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1364 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n          *End _as_tf_output() return:(TF_Output) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1364 0.000000 0.015625 0.015625 0 1 0 4127 0 0.000000 0.031250 0 \n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1364 0.000000 0.031250 0.031250 0 1 0 4127 0 0.000000 0.031250 0 \n        #Start#5#1197743 <listcomp>()   2020-11-03 10:41:56   keyword argument count = 0\n        *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:56 ^^96 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        #Start#5#1197744 _do_call()   2020-11-03 10:41:56   keyword argument count = 0\n          #Start#6#1197745 _extend_graph()   2020-11-03 10:41:56  @1arg:(Session)\n            #Start#7#1197746 _session_run_lock()   2020-11-03 10:41:56  @1arg:(Graph)\n              #Start#8#1197747 group()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n                #Start#9#1197748 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n                *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End group() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^180 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End _session_run_lock() return:(_Context) CostTime:123.000000  2020-11-03 10:41:56 ^^208 1316 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            #Start#7#1197749 acquire()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              #Start#8#1197750 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197751 _another_group_active()   2020-11-03 10:41:56   keyword argument count = 0\n                #Start#9#1197752 <genexpr>()   2020-11-03 10:41:56   keyword argument count = 0\n                *End <genexpr>() return:(generator) CostTime:123.000000  2020-11-03 10:41:56 ^^216 1236 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End _another_group_active() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^156 1352 0.000000 0.000000 0.031250 0 0 0 0 1 0.000000 0.000000 0 \n            *End acquire() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^184 1352 0.000000 0.000000 0.031250 0 0 0 0 1 0.000000 0.000000 0 \n            #Start#7#1197753 release()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              #Start#8#1197754 _validate_group_id()   2020-11-03 10:41:56  @1arg:(GroupLock)@2arg:(int)1\n              *End _validate_group_id() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              #Start#8#1197755 notify_all()   2020-11-03 10:41:56  @1arg:(Condition)\n                #Start#9#1197756 notify()   2020-11-03 10:41:56   keyword argument count = 0\n                  #Start#10#1197757 _is_owned()   2020-11-03 10:41:56  @1arg:(Condition)\n                  *End _is_owned() return:(bool) CostTime:123.000000  2020-11-03 10:41:56 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n                *End notify() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n              *End notify_all() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^120 1228 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n            *End release() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1256 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End _extend_graph() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:56 ^^148 1352 0.093750 0.000000 0.125000 0 0 0 0 1 0.093750 0.000000 1316 \n          #Start#6#1197758 _call_tf_sessionrun()   2020-11-03 10:41:56  @1arg:(Session)@2arg:(NoneType)@3arg:(dict)@4arg:(list)@5arg:(list)@6arg:(NoneType)\n          *End _call_tf_sessionrun() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1172 1.125000 0.203125 0.781250 0 1 0 4128 947 1.125000 0.187500 47561 \n        *End _do_call() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1352 1.218750 0.203125 0.906250 0 1 0 4128 949 1.218750 0.203125 48877 \n      *End _do_run() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^240 1364 1.218750 0.234375 0.937500 0 2 0 8255 949 1.218750 0.234375 48877 \n      #Start#4#1197759 build_results()   2020-11-03 10:41:57  @1arg:(_FetchHandler)@2arg:(Session)@3arg:(list)\n        #Start#5#1197760 build_results()   2020-11-03 10:41:57   keyword argument count = 0\n          #Start#6#1197761 <listcomp>()   2020-11-03 10:41:57   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^160 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n          #Start#6#1197762 build_results()   2020-11-03 10:41:57  @1arg:(_ElementFetchMapper)@2arg:(list)\n            #Start#7#1197763 <lambda>()   2020-11-03 10:41:57   keyword argument count = 0\n            *End <lambda>() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End build_results() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197764 <listcomp>()   2020-11-03 10:41:57   keyword argument count = 0\n          *End <listcomp>() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^96 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          #Start#6#1197765 build_results()   2020-11-03 10:41:57  @1arg:(_ElementFetchMapper)@2arg:(list)\n            #Start#7#1197766 <lambda>()   2020-11-03 10:41:57   keyword argument count = 0\n            *End <lambda>() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n          *End build_results() return:(NoneType) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n        *End build_results() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^92 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      *End build_results() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^120 1228 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n    *End _run() return:(list) CostTime:123.000000  2020-11-03 10:41:57 ^^120 1760 1.250000 0.390625 1.125000 0 8 0 33026 951 1.250000 0.390625 48877 \n  *End _predict_loop() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^332 4220 1.250000 0.453125 1.187500 0 9 0 37156 956 1.250000 0.437500 48880 \n*End predict() return:(numpy.ndarray) CostTime:123.000000  2020-11-03 10:41:57 ^^360 4220 1.281250 0.843750 1.593750 0 22 0 90825 1019 1.281250 0.828125 48898 \n#Start#1#1197767 decode_predictions()   2020-11-03 10:41:57   keyword argument count = 0\n  #Start#2#1197768 get_file()   2020-11-03 10:41:57   keyword argument count = 2,1-th kw:key(str)='cache_subdir',value(str)='models',2-th kw:key(str)='file_hash',value(str)='c2c37ea517e94d9795004a39431a14cb'\n    #Start#3#1197769 join()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197770 splitdrive()   2020-11-03 10:41:57  @1arg:(str)~\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197771 splitdrive()   2020-11-03 10:41:57  @1arg:(str).keras\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End join() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^121 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197772 expanduser()   2020-11-03 10:41:57  @1arg:(str)~\\.keras\n      #Start#4#1197773 _get_bothseps()   2020-11-03 10:41:57  @1arg:(str)~\\.keras\n      *End _get_bothseps() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 1 0 4128 0 0.000000 0.000000 0 \n      #Start#4#1197774 encodekey()   2020-11-03 10:41:57   keyword argument count = 0\n        #Start#5#1197775 check_str()   2020-11-03 10:41:57   keyword argument count = 0\n        *End check_str() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End encodekey() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^145 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197776 encodekey()   2020-11-03 10:41:57   keyword argument count = 0\n        #Start#5#1197777 check_str()   2020-11-03 10:41:57   keyword argument count = 0\n        *End check_str() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.000000 0 \n      *End encodekey() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^152 1200 0.000000 0.015625 0.015625 0 0 0 0 0 0.000000 0.015625 0 \n      #Start#4#1197778 encodekey()   2020-11-03 10:41:57   keyword argument count = 0\n        #Start#5#1197779 check_str()   2020-11-03 10:41:57   keyword argument count = 0\n        *End check_str() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^64 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      *End encodekey() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^152 1200 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End expanduser() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^168 1260 0.000000 0.015625 0.015625 0 1 0 4128 0 0.000000 0.015625 0 \n    #Start#3#1197780 expanduser()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\n    *End expanduser() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197781 join()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197782 splitdrive()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^189 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197783 splitdrive()   2020-11-03 10:41:57  @1arg:(str)models\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End join() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^147 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.015625 0 \n    #Start#3#1197784 exists()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\\models\n    *End exists() return:(bool) CostTime:123.000000  2020-11-03 10:41:57 ^^70 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197785 join()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197786 splitdrive()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\\models\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^196 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n      #Start#4#1197787 splitdrive()   2020-11-03 10:41:57  @1arg:(str)imagenet_class_index.json\n      *End splitdrive() return:(tuple) CostTime:123.000000  2020-11-03 10:41:57 ^^0 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    *End join() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^173 1172 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197788 exists()   2020-11-03 10:41:57  @1arg:(str)C:\\Users\\sosclubnccu\\.keras\\models\\imagenet_class_index.json\n    *End exists() return:(bool) CostTime:123.000000  2020-11-03 10:41:57 ^^122 1108 0.000000 0.000000 0.000000 0 0 0 0 0 0.000000 0.000000 0 \n    #Start#3#1197789 validate_file()   2020-11-03 10:41:57   keyword argument count = 1,1-th kw:key(str)='algorithm',value(str)='auto'\n      #Start#4#1197790 _hash_file()   2020-11-03 10:41:57   keyword argument count = 0\n      *End _hash_file() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^209 110540 0.000000 0.000000 0.015625 3 1 35363 4130 1 0.000000 0.000000 8 \n    *End validate_file() return:(bool) CostTime:123.000000  2020-11-03 10:41:57 ^^156 110540 0.000000 0.000000 0.015625 3 1 35363 4130 1 0.000000 0.000000 8 \n  *End get_file() return:(str) CostTime:123.000000  2020-11-03 10:41:57 ^^184 110540 0.000000 0.031250 0.046875 3 2 35363 8258 1 0.000000 0.031250 8 \n  #Start#2#1197791 load()   2020-11-03 10:41:57   keyword argument count = 0\n    #Start#3#1197792 decode()   2020-11-03 10:41:57   keyword argument count = 0\n      #Start#4#1197793 raw_decode()   2020-11-03 10:41:57   keyword argument count = 1,",
                  "child": []
                }
              ]
            }
          ]
        },
        {
          "name": "<listcomp>()",
          "arg": null,
          "child": []
        }
      ]
    }
  ]
}